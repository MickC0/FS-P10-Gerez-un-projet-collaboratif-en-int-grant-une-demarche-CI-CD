name: Frontend CI + Publish coverage to gh-pages

concurrency:
  group: ${{ github.ref }}.frontend
  cancel-in-progress: true

permissions:
  contents: write
  pages: write

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ "main" ]

jobs:
  frontend-tests-analysis:
    name: Run frontend tests and quality analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Install Chrome browser
        id: install-chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run front-end tests & generate coverage
        id: run-frontend-tests
        env:
          CHROME_BIN: ${{ steps.install-chrome.outputs.chrome-path }}
        run: npm test -- --code-coverage --watch=false --browsers=ChromeHeadlessCI
        continue-on-error: true


      - name: Verify coverage report existence and stop if missing
        run: |
          if [ ! -f "./coverage/bobapp/lcov.info" ]; then          
           echo "Error: File 'coverage/bobapp/lcov.info' not found. Job failed."
           exit 1
          fi
        shell: bash

      - name: Upload frontend coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./front/coverage/bobapp
          retention-days: 7

      - name: Publish frontend coverage report to Github Pages
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./front/coverage/bobapp/lcov-report
          destination_dir: ./coverage-frontend

      - name: Upload frontend coverage to Codecov
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: frontend

      - name: SonarCloud Scan on push to main
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=mickc0
            -Dsonar.projectKey=MickC0_FS-P10-Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_frontend
            -Dproject.settings=../sonar-frontend.properties
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Scan on pull request
        if: ${{ github.event_name == 'pull_request' }}
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=mickc0
            -Dsonar.projectKey=MickC0_FS-P10-Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_frontend
            -Dproject.settings=../sonar-frontend.properties
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.base=${{ github.base_ref }}

      - name: Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Check requirements
        if: ${{ steps.run-frontend-tests.outcome == 'failure' || steps.quality-gate.outcome == 'failure'}}
        run: |
          echo "Job failed :"
          if [ "${{ steps.run-frontend-tests.outcome }}" == "failure" ]; then
            echo "Coverage checks have not been met. See step 'Run tests and generate coverage report' output, and coverage report"
          fi
          if [ "${{ steps.quality-gate.outcome }}" == "failure" ]; then
            echo "Code quality gate check failed. See step 'SonarQube Quality Gate Check'"
          fi
          exit 1