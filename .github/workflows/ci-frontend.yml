name: Frontend CI + Publish coverage to gh-pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write

jobs:
  tests-and-publish:
    name: Run tests, generate coverage & publish to Pages
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Chrome
        id: install-chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run front-end tests & generate coverage
        working-directory: front
        env:
          CHROME_BIN: ${{ steps.install-chrome.outputs.chrome-path }}
        run: |
          npm ci
          npm test -- --code-coverage --watch=false --browsers=ChromeHeadlessCI
        continue-on-error: true

      - name: Prepare coverage for Pages
        run: |
          COVER_BASE=front/coverage
          COVER_DIR=$(find "$COVER_BASE" -maxdepth 1 -mindepth 1 -type d | head -n1)
          if [ -z "$COVER_DIR" ] || [ ! -f "$COVER_DIR/index.html" ]; then
            echo "Aucun rapport de couverture trouvÃ© dans $COVER_BASE" >&2
            exit 1
          fi
          echo "Coverage found in $COVER_DIR"

          rm -rf _site
          mkdir -p _site/coverage-frontend
          cp -R "$COVER_DIR"/* _site/coverage-frontend/
          touch _site/.nojekyll

      - name: Deploy coverage to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site
          publish_branch: gh-pages
          allow_empty_commit: true

      - name: Upload coverage to Codecov
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: frontend

      - name: SonarCloud Scan
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=mickc0
            -Dsonar.projectKey=MickC0_FS-P10-Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_frontend
            -Dproject.settings=sonar-frontend.properties
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: .scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Fail on unmet requirements
        if: ${{ steps.run-frontend-tests.outcome == 'failure' || steps.quality-gate.outcome == 'failure' }}
        run: |
          echo "Frontend CI failed"
          exit 1
