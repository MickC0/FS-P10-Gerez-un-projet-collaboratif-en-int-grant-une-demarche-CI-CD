name: Frontend CI & CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ci-cd-frontend-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pages: write

jobs:
  ci:
    name: CI tests, coverage, Sonar & Pages
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Chrome
        id: install-chrome
        uses: browser-actions/setup-chrome@v1

      - name: Run tests & generate coverage
        env:
          CHROME_BIN: ${{ steps.install-chrome.outputs.chrome-path }}
        run: |
          npm ci
          npm test -- --code-coverage --watch=false --browsers=ChromeHeadlessCI
        continue-on-error: true
        id: run-tests

      - name: Verify coverage exists
        run: |
          if [ ! -d coverage ] || [ -z "$(find coverage -maxdepth 1 -mindepth 1 -type d)" ]; then
            echo "coverage folder missing"
            exit 1
          fi

      - name: Prepare Pages directory
        working-directory: ${{ github.workspace }}
        run: |
          rm -rf _site
          mkdir -p _site/coverage-frontend
          cp -R front/coverage/* _site/coverage-frontend/
          touch _site/.nojekyll

      - name: Publish coverage to GitHub Pages
        if: ${{ github.event_name == 'push' }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site
          publish_branch: gh-pages
          destination_dir: coverage-frontend
          allow_empty_commit: true

      - name: Upload to Codecov
        if: ${{ github.event_name == 'push' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: frontend

      - name: SonarCloud Scan
        if: ${{ github.event_name == 'push' }}
        run: |
          sonar-scanner \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=mickc0 \
            -Dsonar.projectKey=MickC0_FS-P10-Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD_frontend \
            -Dproject.settings=sonar-frontend.properties \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: front/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Fail if CI requirements not met
        if: ${{ steps.run-tests.outcome == 'failure' || steps.quality-gate.outcome == 'failure' }}
        run: |
          echo "ðŸš¨ Frontend CI failed (tests or quality gate)."
          exit 1

  cd-docker:
    name: CD Build & Push Docker Image
    needs: ci
    runs-on: ubuntu-latest
    if: >-
      needs.ci.result == 'success' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Build Angular for production
        run: |
          cd front
          npm ci
          npm run build -- --configuration=production

      - name: Docker Hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/bobapp-frontend
          tags: |
            latest
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=long

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          context: front
          file: front/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
